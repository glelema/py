# Program to remove a number from an array of 4 values
# The format is: <instruction mem. address>: <OPCODE> <COMMA SEPARATED OPERANDS>;
# All numbers are decimal integers

# multiplier of 2 positive integers, both less or equal to 15
# create 4 indices in (R0-R3):
0: LI R1, 1;  # R1 = index 1, R0 already index 0
1: LI R2, 2;  # R2 = index 2
2: LI R3, 20; # R3 = row 20
3: LI R4, 16; # R4 = border value of multiplier
4: LI R5, 35; # R5 = jump to zero -> END instruction in IC
5: LI R6, 40; # R6 = END instruction in IC
6: LI R7, 13; # R7 = program counter to continue check multiplier size
7: LI R8, 25; #

# copy from mem to registers (R10-R11):
8: LD R10, R0;  # load data from mem 0 to R10, multiplier 0
9: LD R11, R1;  # load data from mem 1 to R11, multiplier 1

# see if any of multipliers is zero
10: JEQ R5, R10, R0; # go to R5 / zero -> END if match
11: JEQ R5, R11, R0; # go to R5 / zero -> END if match

# see if any of multipliers is greater than 15
12: JLT R7, R10, R4; # go to R7 / 13 if multiplier 0 is less than 16
13: JLT R3, R11, R4; # go to R3 / 20 if multiplier 1 is less than 16
14: JR R6; # END when 2 previous rows indicated multiplier >16

#
20: SUB R11, R11, R1; # decrement multiplier 1 by 1
21: ADD R12, R12, R10; #
22: JEQ R8, R11, R0;  # compare with 0, if so go to R8 / 25
23: JR R3; #

# non-zero product to mem 2 -> END
25: SD R12, R2;
26: JR R6; # END

# zero to mem 2 -> END
35: SD R0, R2; # memory 2 is output directory
36: JR R6; # go to END

40: END;
